releases: (( merge ))

meta:

  releases: (( releases ))

  openstack: (( merge ))

  provider_dns: (( merge ))

  bosh-network:
    cidr: (( merge ))

  fog_config:
    provider: openstack
    openstack_auth_url: (( meta.openstack.auth_url ))
    openstack_api_key: (( meta.openstack.api_key ))
    openstack_username: (( meta.openstack.username ))
    openstack_tenant: (( meta.openstack.tenant ))
    openstack_region: (( meta.openstack.region ))

  stemcell:
    name: bosh-openstack-kvm-ubuntu
    version: (( merge || "latest" ))

  environment: (( merge ))

  networks: (( merge ))

networks:
  - name: cf1
    type: manual
    subnets:
    - name: private
      range: (( meta.networks.cf1.range ))
      gateway: (( meta.networks.cf1.gateway ))
      reserved: (( meta.networks.cf1.reserved ))
      static: (( meta.networks.cf1.static ))
      cloud_properties:
        net_id: (( meta.openstack.net_id ))
        # see http://docs.cloudfoundry.com/docs/running/deploying-cf/common/security_groups.html
        security_groups: (( meta.openstack.security_groups ))

# The default Openstack deploy only uses one network. This is zeroed out to allow
# downstream templates to work
  - name: cf2
    type: manual
    subnets:
    - name: private
      range: ~
      gateway: ~
      reserved: ~
      static: ~
      #-
      cloud_properties:
        net_id: (( meta.openstack.net_id ))
        security_groups: (( meta.openstack.security_groups ))

properties:
  template_only: ~

  logger_endpoint:
    port: 4443

  # loggregator.blacklisted_syslog_ranges
  # used to prevent non-user app syslogs from sending
  # data to the user app log server. optional
  loggregator:
    blacklisted_syslog_ranges:
    - start: (( merge || ~ )) ##TODO this renders literally
      end:   (( merge || ~ )) ##TODO this renders literally
    - start: (( merge || ~ )) ##TODO this renders literally
      end:   (( merge || ~ )) ##TODO this renders literally

  ccng: (( merge ))
  cc: (( merge ))

  uaa:
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m

  login:
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m

  dea_next:
    deny_networks:
      - 169.254.0.0/16 # Openstack Metadata endpoint
      - (( meta.bosh-network.cidr )) # BOSH network

    allow_networks:
      - (( meta.provider_dns "/32" ))

compilation:
  cloud_properties:
    instance_type: m1.medium

resource_pools:
  - name: small_z1
    cloud_properties:
      instance_type: m1.small

  - name: small_z2
    cloud_properties:
      instance_type: m1.small

  - name: medium_z1
    cloud_properties:
      instance_type: m1.medium

  - name: medium_z2
    cloud_properties:
      instance_type: m1.medium

  - name: large_z1
    cloud_properties:
      instance_type: m1.large

  - name: large_z2
    cloud_properties:
      instance_type: m1.large

  - name: runner_z1
    cloud_properties:
      instance_type: m1.large

  - name: runner_z2
    cloud_properties:
      instance_type: m1.large

  - name: router_z1
    cloud_properties:
      instance_type: m1.medium
      elbs: (( merge || ["cfrouter"] ))

  - name: router_z2
    cloud_properties:
      instance_type: m1.medium
      elbs: (( merge || ["cfrouter"] ))

# This config is for the simplest Openstack config using just one AZ.
# All values for "z2" and network "cf2" are set to null. They'll end up
# in the final 'spiff merge' manifest with zero instances.
jobs:
  - name: logs_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(0) ))

  - name: nats_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(1) ))

  - name: nfs_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(2) ))

  - name: postgres_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(3) ))

  - name: hm_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(4) )) ## TODO: this IP is not carried downstream

  - name: router_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(5, 6, 15, 16, 17, 18, 19, 20) ))

  - name: loggregator_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(21, 22) ))

  - name: loggregator_trafficcontroller_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(24) ))

  - name: etcd_leader_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(9) ))

  - name: etcd_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(10) ))

  # Set *_z2 job instances to 0
  - name: logs_z2
    instances: 0
    networks:
      - name: cf2
        static_ips: []

  - name: nats_z2
    instances: 0
    networks:
      - name: cf2
        static_ips: [~]

  - name: router_z2
    instances: 0
    networks:
      - name: cf2
        static_ips: []

  - name: etcd_z2
    instances: 0
    networks:
      - name: cf2
        static_ips: []

  - name: loggregator_z2
    instances: 0
    networks:
     - name: cf2
       static_ips: []

  - name: loggregator_trafficcontroller_z2
    instances: 0
    networks:
      - name: cf2
        static_ips: ~

  - name: uaa_z2
    instances: 0

  - name: api_z2
    instances: 0

  - name: api_worker_z2
    instances: 0

  - name: hm9000_z2
    instances: 0

  - name: runner_z2
    instances: 0
