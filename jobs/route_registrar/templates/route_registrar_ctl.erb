#!/bin/bash -e

<%
   def discover_external_ip
     networks = spec.networks.marshal_dump

     _, network = networks.find do |_name, network_spec|
       network_spec.default
     end

     if !network
       _, network = networks.first
     end

     if !network
       raise "Could not determine IP via network spec: #{networks}"
     end

     network.ip
   end

   routes = p('route_registrar.routes').map do |port, routes|
     routes.map do |route|
       %({"route":"#{route}","port":#{port},"ip":"#{discover_external_ip}","ttl":#{p('route_registrar.ttl')}})
     end
   end.flatten.join(",")
%>

RUN_DIR=/var/vcap/sys/run/route_registrar
PIDFILE=$RUN_DIR/route_registrar.pid
export PATH=/var/vcap/packages/rtr/bin:${PATH} # put the routing-api cli on the path

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "route_registrar"

    mkdir -p $RUN_DIR

    chown -R vcap:vcap $RUN_DIR

    echo $$ > $PIDFILE

    while [ 1 ]
    do
      rtr register --api <%= p('route_registrar.api_endpoint') %> --oauth-name <%= p('route_registrar.api_username') %> --oauth-password <%= p('route_registrar.api_password') %> --oauth-url <%= p('uaa.issuer') %> '[<%= routes %>]'
      sleep <%= p('route_registrar.register_interval') %>
    done

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: route_registrar_ctl {start|stop}"

    ;;

esac
